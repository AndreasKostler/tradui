(ns tradui.util.regex)

;; Bunch of helper functions and definitions that are useful when
;; working with regular expressions

(def ws* "[ \tn\f\r]*")
(def ws+ "[ \t\n\f\r]+")

(defn re-parse [r s]
  "Takes in a re generated by re-create and a string to match and returns a map
   with group names as keys and the group matches as values."
  (if-let [match (re-find (:regex r) s)]
    (let [el (first (:groups r))
          m (reduce #(conj %1 %2) {} (map (fn [x y] [x y]) (:groups r) match))]
      (into {:type el :flags (:flags r)} m))))

(defn sl [s]
  "Quotes a string literal so that it can be used in a regular expression. See javadocs for java.util.regex.Pattern"
  (. java.util.regex.Pattern quote s))

(defn re-create [r & flags]
  "Creates a java.util.regex.Pattern from a slightly different representation using keywords to name groups
   Example: [:codeblock \"<<\" :language \"(.+?)\" :body \"(.+?)\" \">>\"]
   The resultiong regular expression has three groups [:codeblock :language :body] that can be accessed through their names."
        (letfn [(build [map el]
                       (if (keyword? el) (assoc map :groups (conj (:groups map) el))
                           (assoc map :regex (str (:regex map) el))))]
                           (let [m (reduce build {:regex "" :groups '[] :flags (apply vector flags)} r)
                                regex-s (:regex m)]
                             (assoc m :regex (. java.util.regex.Pattern compile regex-s)))))



